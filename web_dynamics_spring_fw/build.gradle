apply plugin: 'war'
apply plugin: 'eclipse'
repositories {
    mavenCentral()
}

def tomcatHome = '/usr/local/disk1/files/apache-tomee-plus-1.7.1'
def libsDir= 'build/libs'
def org.springframework-version= '4.1.0.RELEASE'
dependencies {
    compile(
    [ group: 'commons-logging', name: 'commons-logging', version: '1.2' ]
    [ group: 'org.apache.commons', name: 'commons-lang3', version: '3.3.2' ]
    [ group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0' ]
	[ group: 'commons-configuration', name: 'commons-configuration', version: '1.10' ]
	[ group: 'org.elasticsearch', name: 'elasticsearch', version: '1.4.2' ]
	[ group: 'org.springframework',  name: 'spring-context',  version: ${org.springframework-version} ] 
	[ group: 'org.springframework', name: 'spring-webmvc', version: ${org.springframework-version} ]
	[ group: 'org.springframework', name: 'spring-aop', version: ${org.springframework-version} ]
	[ group: 'org.springframework', name: 'spring-beans', version: ${org.springframework-version} ]
	[ group: 'org.springframework', name: 'spring-expression', version: ${org.springframework-version} ]
	[ group: 'org.springframework', name: 'spring-web', version: ${org.springframework-version} ]
	[ group: 'org.springframework', name: 'spring-core', version: ${org.springframework-version} ]
	[ group: 'aopalliance', name: 'aopalliance', version: '1.0' ]
	[ group: 'org.aspectj', name: 'aspectjrt', version: ${org.aspectj-version} ]
	[ group: 'org.slf4j', name: 'slf4j-api', version: ${org.slf4j-version} ]
	[ group: 'org.slf4j', name: 'jcl-over-slf4j', version: ${org.slf4j-version} ]
	[ group: 'org.slf4j', name: 'slf4j-log4j12', version: ${org.slf4j-version} ]
	[ group: 'log4j', name: 'log4j', version: '1.2.16' ]
	[ group: 'javax.inject', name: 'javax.inject', version: '1' ]
	[ group: 'javax.servlet.jsp', name: 'jsp-api', version: '3.0' ]
	[ group: 'javax.servlet.jsp.jstl', name: 'jstl-api', version: '1.2' ]
	)
	
	compile('ch.qos.logback:logback-classic:1.0.0') {
        exclude group: 'org.slf4j', module: 'slf4j-api' //by both name and group
    }
    
	compile('javax.servlet.jsp.jstl:jstl-api:1.2') {
        exclude group: 'javax.servlet', module: 'servlet-api' //by both name and group
    }
}



task cleanTomcatDir(type:Exec){
	//println "stop tomcat first if running"
	
	workingDir '/usr/local/disk1/files/apache-tomee-plus-1.7.1/webapps'
	
	commandLine 'rm', '-rf', 'web_dynamics', 'web_dynamics.war'
	
	//store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method startTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }	
}

task copyWar() << {
    
    //println "Copy from ${libsDir.getPath()} into ${tomcatHome}/webapps"
    copy{
      from libsDir
      into "${tomcatHome}/webapps"
      include '*.war'
    }
}

task startTomcat(type:Exec) {
  
  workingDir '/usr/local/disk1/files/apache-tomee-plus-1.7.1/bin'

  
  //on linux
  commandLine './startup.sh'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()
  println "output" + standardOutput.toString();	
   
	
/*	def command = """sudo -u nitesh /usr/local/disk1/files/apache-tomee-plus-1.7.1/bin/catalina.sh start"""
  	def proc = command.execute()                 // Call *execute* on the string
	proc.waitFor() */
  //extension method startTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}

task deployWar(dependsOn: ['build', 'cleanTomcatDir' , 'copyWar', 'startTomcat'])
cleanTomcatDir.mustRunAfter build
copyWar.mustRunAfter cleanTomcatDir
startTomcat.mustRunAfter copyWar

task stopTomcat(type:Exec) {
  workingDir '/usr/local/disk1/files/apache-tomee-plus-1.7.1/bin'

  //on linux
  commandLine './shutdown.sh'

  //store the output instead of printing to the console:
  standardOutput = new ByteArrayOutputStream()

  //extension method stopTomcat.output() can be used to obtain the output:
  ext.output = {
    return standardOutput.toString()
  }
}